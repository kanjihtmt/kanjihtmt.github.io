<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | console.log('blog') | puts 'blog']]></title>
  <link href="http://kanjihtmt.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kanjihtmt.github.io/"/>
  <updated>2015-04-25T09:42:49+09:00</updated>
  <id>http://kanjihtmt.github.io/</id>
  <author>
    <name><![CDATA[kanji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Railsのscaffoldで生成されたコードを1行1行説明する]]></title>
    <link href="http://kanjihtmt.github.io/blog/2015/04/02/scaffold/"/>
    <updated>2015-04-02T20:30:31+09:00</updated>
    <id>http://kanjihtmt.github.io/blog/2015/04/02/scaffold</id>
    <content type="html"><![CDATA[<p>Rails初心者です。頑張ってます。Ruby on Railsのscaffoldで生成されたコードを全て説明できるようになるようにと言われたので、説明してみます。</p>

<pre><code>bundle exec rails g scaffold Entry title:string body:text
</code></pre>

<h2>ファイル構成</h2>

<p>scaffoldを実行すると以下のファイルが生成されます。その他に生成されるテストコードとかマイグレーションファイルは無視しています。</p>

<pre><code>PROJECT_ROOT
 |- controllers
 |    |- entries_controller.rb
 |- helpers
 |    |- entries_helper.rb
 |- models
 |    |- entry.rb
 |- views
 |    |- _form.html.erb
 |    |- edit.html.erb
 |    |- index.html.erb
 |    |- index.json.jbuilder
 |    |- new.html.erb
 |    |- show.html.erb
 |    |- show.json.jbuilder
</code></pre>

<h2>コントローラ</h2>

<p>まずはコントローラからです。コントローラは空のクラスであるApplicationControllerを継承してます。コントローラの共通処理を定義するためにこのクラスは存在しています。ApplicationControllerは、さらにその親クラスであるActionController::Baseを継承しています。このコードはprotect_from_forgeryメソッドによりCSRF対策をデフォルトで有効にしています。</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception
end
</code></pre>

<p>Entryコントローラにはindex, show, new, edit, create, update, destroyアクションが定義されます。規約によりアクション、URL、HTTPメソッドの対応関係が決まっています。これはRestからの設計思想で以下のようになっています。</p>

<table>
<thead>
<tr>
<th> アクション </th>
<th> URLパス         </th>
<th> HTTP METHOD </th>
</tr>
</thead>
<tbody>
<tr>
<td> index      </td>
<td> /entries/       </td>
<td> GET         </td>
</tr>
<tr>
<td> show       </td>
<td> /entries/1      </td>
<td> GET         </td>
</tr>
<tr>
<td> new        </td>
<td> /entries/new    </td>
<td> GET         </td>
</tr>
<tr>
<td> edit       </td>
<td> /entries/1/edit </td>
<td> GET         </td>
</tr>
<tr>
<td> create     </td>
<td> /entries        </td>
<td> POST        </td>
</tr>
<tr>
<td> update     </td>
<td> /entries/1      </td>
<td> PATCH       </td>
</tr>
<tr>
<td> destroy    </td>
<td> /entries/1      </td>
<td> DELETE      </td>
</tr>
</tbody>
</table>


<p>そしてこの仕組みを作っているのがルーティングになります。ブロック内でresourcesメソッドにシンボルを渡すことでRailsがRESTアクセスを許可します。exceptや、onlyなどのオプションでアクセスを制御することもできます。</p>

<pre><code class="ruby">Rails.application.routes.draw do
  resources :entries
end
</code></pre>

<p>通常は<code>HTTPメソッド 'URLパス', 'コントローラ#アクション'</code>の形式で定義していきますが、scaffoldが追記したルーティングはリソースベースのルーティングになります。これは以下のルーティング定義と同じになります。</p>

<pre><code class="ruby">Rails.application.routes.draw do
  get 'entries' =&gt; 'entries#index'
  get 'entries/:id' =&gt; 'entries#show'
  get 'entries/new' =&gt; 'entries#new'
  get 'entries/:id/edit' =&gt; 'entries#edit'
  post 'entries' =&gt; 'entries#create'
  patch 'entries/:id' =&gt; 'entries#update'
  delete 'entries/:id' =&gt; 'entries#delete'
end
</code></pre>

<p>ビューで使用されるルーティング名もここで定義されます。</p>

<table>
<thead>
<tr>
<th> URLパス         </th>
<th> ルーティング名 </th>
</tr>
</thead>
<tbody>
<tr>
<td> /entries        </td>
<td> :entries       </td>
</tr>
<tr>
<td> /entries/1      </td>
<td> :entry         </td>
</tr>
<tr>
<td> /entries/new    </td>
<td> :new_entry     </td>
</tr>
<tr>
<td> /entries/1/edit </td>
<td> :edit_entry    </td>
</tr>
</tbody>
</table>


<p>あとコントローラのソースをざっと見て感じたことは、scaffoldで生成したコントローラのprivateメソッドは1つインデントを下げているのでコーディング規約的にはこれを覚えた方がいいかなと思います。</p>

<pre><code class="ruby">private
  def set_entry
    @entry = Entry.find(params[:id])
  end
</code></pre>

<h3>beforeアクション</h3>

<p>各アクションが実行される前に必ず処理されます。アクションで処理を共通化したい場合はここに書きます。これらはshow, edit, update, destroyアクションの前にset_entryというメソッドを実行するよう定義しています。</p>

<pre><code class="ruby">before_action :set_entry, only: [:show, :edit, :update, :destroy]
</code></pre>

<h3>indexアクション</h3>

<p>Entryモデルから全件取得し、@entriesというインスタンス変数に代入しているだけです。</p>

<pre><code class="ruby">index
  @entries = Entry.all
end
</code></pre>

<h3>showアクション</h3>

<p>メソッドを定義しているだけで処理内容がありませんが、before_actionが実行されるため処理内容がアクション内になくてもビューにEntryオブジェクトの値が渡ります。</p>

<h3>newアクション</h3>

<p>Entryモデルのインスタンスを生成して@entryインスタンス変数に渡しています。</p>

<h3>editアクション</h3>

<p>こちらもメソッドを定義しているだけで実装がありませんが、showアクションと同様、before_actionで処理を任せています。</p>

<h3>createアクション</h3>

<p>POSTされた値を受け取ってentry_paramsプライベートメソッドに処理をさせます。これは何をやっているかというとStrong Parameterという機能です。たとえばこのentitiesというテーブルにはtitleとbodyといったカラム以外に、created_atなどユーザには表示しないシステムの都合上のカラムなどもあります。不正なアクセスで改ざんされる危険性がありますので、titleとbodyのみを許可するようこのメソッドで処理しています。</p>

<pre><code class="ruby">def entry_params
  params.require(:entry).permit(:title, :body)
end
</code></pre>

<p>こうして許可されたパラメータだけが返ってくるので、そのパラメータを使ってEntryモデルを初期化します。respond_toメソッドのブロックでHTTPレスポンスの処理を行います。formatオブジェクトのhtmlメソッドにはHTMLを返すための処理を定義します、jsonメソッドはJSONを返すための処理を定義します。</p>

<p>問題無くエントリーが保存された場合は、HTMLを取得するためのアクセスならばリダイレクトします。JSONを取得するためのアクセスならばJSONを返します。保存に失敗した場合は、HTMLを取得するためのアクセスならばnewアクションに戻して再入力を施します。JSONを取得するためのアクセスならば、クライアントにJSONでエラー状態のJSONを返します。
saveメソッドは、if文の条件に使われているので成功したらtrue, 失敗したらfalseを返しますが、save!と破壊的メソッドにすれば失敗した場合は例外がraiseされます。</p>

<pre><code class="ruby">def create
  @entry = Entry.new(entry_params)

  respond_to do |format|
    if @entry.save
      format.html { redirect_to @entry, notice: 'Entry was successfully created.' }
      format.json { render :show, status: :created, location: @entry }
    else
      format.html { render :new }
      format.json { render json: @entry.errors, status: :unprocessable_entity }
    end
  end
end
</code></pre>

<h3>updateアクション</h3>

<p>モデルのupdateメソッドを呼ぶところとメッセージ以外、ほぼcreateアクションと同じです。</p>

<h3>destroyアクション</h3>

<p>モデルのdestroyメソッドを呼び出し、リダイレクトします。ここでredirect_toメソッドの引数でentries_urlというメソッドが呼び出されていますが、このようにルーティングで定義されたルーティング名である:entriesに_urlというサフィックスを付けたメソッドを呼び出すことで/entriesへのURLを生成してくれます。</p>

<pre><code class="ruby">def destroy
  @entry.destroy
  respond_to do |format|
    format.html { redirect_to entries_url, notice: 'Entry was successfully destroyed.' }
    format.json { head :no_content }
  end
end
</code></pre>

<h2>モデル</h2>

<p>モデルはバリデーションも定義してませんので2行だけです。これだけで多くの機能を使うことができます。</p>

<pre><code>class Entry &lt; ActiveRecord::Base
end
</code></pre>

<h2>ビュー</h2>

<p>ビューはRailsのデフォルトではERBが使われます。拡張子が.jbuilderはJSONのビューになりますが、ここでは取り扱わず、erbのみ説明します。</p>

<h3>index.html.erb</h3>

<p>重要なところは以下の箇所です。コントローラから渡されたエントリー一覧をeachメソッドで繰り返しています。モデルのプロパティを呼び出しながら値を表示します。link_toメソッドはビューのヘルパーメソッドで、第1引数にリンクの文字列、第2引数にURLパスを指定します。showやdestroyの場合はentryオブジェクトを渡すだけでURLパスにしてくれます。editやnewに関してはルーティング名に_pathをつけたヘルパーメソッドがURLパスを出力してくれます。</p>

<pre><code>&lt;% @entries.each do |entry| %&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;%= entry.title %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= entry.body %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Show', entry_path %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Edit', edit_entry_path(entry) %&gt;&lt;/td&gt;
    &lt;td&gt;&lt;%= link_to 'Destroy', entry, method: :delete, data: { confirm: 'Are you sure?' } %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;% end %&gt;

&lt;%= link_to 'New Entry', new_entry_path %&gt;
</code></pre>

<p>削除のlink_toはちょっと複雑です、第2引数にentryオブジェクトを渡すのはshowアクションへのリンクと同じですが、第3引数にハッシュを渡しています。<code>method: :delete</code>と定義することで<code>data-method="delete"</code>という属性を出力します。この指定をすることでRailsはリンクをGETではなくDELETEでアクセスします。<code>data: { conform: 'Are you sure?' }</code>と定義することで<code>data-confirm="Are you sure?"</code>という属性を出力します。これにより削除のリンクをクリックするとconfirmダイアログが出力されます。</p>

<h3>show.html.erb</h3>

<p>このビューも重要なのは以下の箇所です。ルーティング名である:entries, :edit_entryに_pathをつけたヘルパーメソッドによりURLパスを指定しています。</p>

<pre><code>&lt;%= link_to 'Edit', edit_entry_path(@entry) %&gt; |
&lt;%= link_to 'Back', entries_path %&gt;
</code></pre>

<h3>new.html.erb</h3>

<p>ビューでのrenderヘルパーメソッドは引数に文字列を指定すると、<code>_指定した文字列.html.erb</code>のファイルを読み込みます。フォームの内容は<code>_form.html.erb</code>に記述されています。</p>

<pre><code>&lt;%= render 'form' %&gt;

&lt;%= link_to 'Back', entries_path %&gt;
</code></pre>

<h3>edit.html.erb</h3>

<p><code>new.html.erb</code>とほぼ一緒です。</p>

<pre><code>&lt;%= render 'form' %&gt;

&lt;%= link_to 'Show', @entry %&gt; |
&lt;%= link_to 'Back', entries_path %&gt;
</code></pre>

<h3>_form.html.erb</h3>

<p>フォームヘルパーにエントリーオブジェクトを渡してブロックでフォーム内容を定義していきます。最初にあるのはエラー処理になります。フォームを作成するには、フォームオブジェクトのヘルパーメソッドにモデルの属性をシンボルを渡していけばHTMLでフォームを出力します。フォームヘルパーはひとつずつ覚えていくしかないと思います。</p>

<pre><code>&lt;%= form_for(@entry) do |f| %&gt;
  &lt;% if @entry.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@entry.errors.count, "error") %&gt; prohibited this entry from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @entry.errors.full_messages.each do |message| %&gt;
        &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="field"&gt;
    &lt;%= f.label :title %&gt;&lt;br&gt;
    &lt;%= f.text_field :title %&gt;
  &lt;/div&gt;
  &lt;div class="field"&gt;
    &lt;%= f.label :body %&gt;&lt;br&gt;
    &lt;%= f.text_area :body %&gt;
  &lt;/div&gt;
  &lt;div class="actions"&gt;
    &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<h1>まとめ</h1>

<p>1行1行説明することで理解ができました。基本をやりなさいと言われた時、「それぐらい分かる」と思いがちで実際に素直にやらない場合もあるかもしれませんが、経験的にこの辺の基礎的なことは、もうバカみたいに実直にやった方がいいと思います。仕組みが分かったので、後はscaffoldを何度か写経したら完璧です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infrastructure as Code]]></title>
    <link href="http://kanjihtmt.github.io/blog/2015/03/14/infrastructure-as-code/"/>
    <updated>2015-03-14T08:20:37+09:00</updated>
    <id>http://kanjihtmt.github.io/blog/2015/03/14/infrastructure-as-code</id>
    <content type="html"><![CDATA[<p>色々あってしばらく投稿できなく、いまさら感がありますが2/14の「<a href="http://osh-web.github.io/2015/">オープンセミナー2015@広島</a>」に参加しました。</p>

<p>普段から開発環境やサーバを構築するのにプロビジョニングツールやVagrant等を使っていましたので、僕よりも実践で活用されている方の経験を聞け、自分自身も考えが整理できました。去年はテスト駆動開発、今年は構成管理がテーマとして続き、ソフトウェア開発の現場でホットなことを毎年扱う良いイベントになってきたなと思いました。</p>

<p>広島でも最近、勉強会やコミュニティが活性化して来て、ますます面白くなっている感じがします。</p>

<p>僕も一応、懇親会のLTで発表をしました。</p>

<iframe src="http://www.slideshare.net/kanjihatamoto/slideshelf" width="490px" height="470px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:none;" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>


<p>僕は新しい技術であれば何でも良いわけではなく、新しいパラダイムやアプローチで既存のやり方や仕組みを変えてしまうようなものが好きですし、そういった技術にすぐに反応してしまいます。「Infrastructure as Code」という考えはこれまでサーバを構築したり運用してきた人の暗黙知をコードとして落としこむことに意味があると思っております。脅威とかリスクはなにか？を考えるとある日突然、サーバ担当者が会社に来なくなるとか退社するという現実です。
そういった現実に対してプロビジョニングツールやServerspecといったツールを利用することで面倒なExcelを使った運用管理ドキュメントの保守(このドキュメント自体が保守されないですが)や面倒な引き継ぎ作業といったことが無くなると考え、これまでこれらの技術と向き合ってきました。そういったベースがあり自分の考えや知見をLTしてみました。</p>

<p>思った以上に反響があり、個人的にはServerspecの作者の方からコメントを頂けたのが何より嬉しかったです。自分が尊敬しているエンジニアの方からそういうのがあると励みにもなります。ありがとうございました。</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="ja"><p>Itamae がフィーチャーされてる。良い資料。 ー Infrastructure as codeのススメ <a href="http://t.co/NlTcthu9mz">http://t.co/NlTcthu9mz</a> via <a href="https://twitter.com/SlideShare">@SlideShare</a></p>&mdash; Gosuke Miyashita (@gosukenator) <a href="https://twitter.com/gosukenator/status/567138412969197568">2015, 2月 16</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
</feed>
